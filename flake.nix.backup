{
  description         # Enhanced plugin builder with better naming and structure
        buildPorterPlugin = { name, version, shellInit, description ? "" }:
          let
            # Use safe naming conventions to avoid conflicts
            safeName = builtins.replaceStrings ["-"] [""] name;
          in
          pkgs.writeShellScriptBin safeName ''
            echo "üöÄ Porter ${description} v${version}"
            echo "Plugin: ${name} | Binary: ${safeName}"
            echo "----------------------------------------"
            ${shellInit}
          '';stom Devbox Plugins - Modular Architecture v2.0";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
        
        # Helper function to format version strings for attribute names
        formatVersion = version: builtins.replaceStrings ["."] ["-"] version;
        
        # Enhanced plugin builder with better naming and structure
        buildPorterPlugin = { name, version, shellInit, description ? "" }:
          let
            # Use safe naming conventions to avoid conflicts
            safeName = builtins.replaceStrings ["-"] [""] name;
          in
          pkgs.writeShellScriptBin safeName ''
            echo "ÔøΩ Porter ${description} v${version}"
            echo "Plugin: ${name} | Binary: ${safeName}"
            echo "----------------------------------------"
            ${shellInit}
          '';
        
        # Define plugins using enhanced modular structure
        plugins = {
        # Define plugins using enhanced modular structure
        plugins = {
          org-linter = {
            "1.0.0" = buildPorterPlugin {
              name = "org-linter";
              version = "1.0.0";
              description = "Organization Linter";
              shellInit = ''
                echo "üîç Available linting tools:"
                echo "  ‚Ä¢ eslint (JavaScript/TypeScript)"
                echo "  ‚Ä¢ prettier (Code formatting)"
                echo "  ‚Ä¢ golangci-lint (Go)"
                echo "  ‚Ä¢ shellcheck (Shell scripts)"
                echo "  ‚Ä¢ yamllint (YAML files)"
                echo ""
                
                # Create linting aliases
                alias lint-js="eslint --ext .js,.ts,.jsx,.tsx"
                alias lint-go="golangci-lint run"
                alias lint-shell="find . -name '*.sh' -exec shellcheck {} \;"
                alias lint-yaml="yamllint ."
                alias lint-all="echo 'Running all linters...' && lint-js . && lint-go && lint-shell && lint-yaml"
                
                echo "üìã Usage:"
                echo "  lint-all    - Run all linters"
                echo "  lint-js     - Lint JavaScript/TypeScript"
                echo "  lint-go     - Lint Go code"
                echo "  lint-shell  - Lint shell scripts"
                echo "  lint-yaml   - Lint YAML files"
                echo ""
                echo "‚ú® Ready to lint your Porter organization code!"
              '';
            };
          };
          
          db-seeder = {
            "1.0.0" = buildPorterPlugin {
              name = "db-seeder";
              version = "1.0.0";
              description = "Database Seeder";
              shellInit = ''
                echo "üóÑÔ∏è  Available database tools:"
                echo "  ‚Ä¢ PostgreSQL (psql)"
                echo "  ‚Ä¢ MySQL 8.0 (mysql)"
                echo "  ‚Ä¢ Redis (redis-cli)"
                echo "  ‚Ä¢ Node.js 20 (for JS seeders)"
                echo "  ‚Ä¢ Python 3.11 (for Python seeders)"
                echo ""
                
                # Create database management aliases
                alias db-setup="echo 'üîß Setting up database environment...' && echo 'Configure your database connection and run setup scripts'"
                alias db-seed="echo 'üå± Seeding database...' && echo 'Run your data seeding scripts'"
                alias db-reset="echo 'üîÑ Resetting database...' && echo 'Clear and reset database to initial state'"
                alias db-migrate="echo 'üìà Running migrations...' && echo 'Apply database schema migrations'"
                alias db-status="echo 'üìä Database status:' && ps aux | grep -E '(postgres|mysql|redis)' | grep -v grep || echo 'No database processes found'"
                
                echo "üìã Usage:"
                echo "  db-setup    - Setup database environment"
                echo "  db-seed     - Seed database with data"
                echo "  db-reset    - Reset database"
                echo "  db-migrate  - Run migrations"
                echo "  db-status   - Check database processes"
                echo ""
                echo "‚ú® Ready to manage your Porter databases!"
              '';
            };
          };
        };
        
        # Enhanced package creation with better error handling
        mkVersions = name: versions: 
          builtins.listToAttrs (map (version: 
            let
              attrName = "${name}-v${formatVersion version}";
              pluginPackage = versions.${version};
            in {
              name = attrName;
              value = pluginPackage;
            }
          ) (builtins.attrNames versions));
            
      in {
        # Package outputs with enhanced structure
        packages = 
          (mkVersions "org-linter" plugins.org-linter) //
          (mkVersions "db-seeder" plugins.db-seeder);
        
        # Enhanced development environment
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            bash
            jq
            git
          ];
          
          shellHook = ''
            echo "ÔøΩ Porter Plugin Development Environment - Modular Architecture v2.0"
            echo "======================================================================"
            echo ""
            echo "üîß Available Development Commands:"
            echo "  ./scripts/add-plugin.sh      - Add a new plugin to the architecture"
            echo "  ./scripts/update-version.sh  - Manage plugin versions"
            echo ""
            echo "üì¶ Available Plugins:"
            echo "  ‚Ä¢ org-linter v1.0.0  - Organization code linting tools"
            echo "  ‚Ä¢ db-seeder v1.0.0   - Database seeding and management"
            echo ""
            echo "üß™ Test Plugins:"
            echo "  devbox.json format:"
            echo '  {"packages": ["git+ssh://git@github.com/shashankatporter/custom-devbox-plugin.git#org-linter-v1-0-0"]}'
            echo ""
            echo "  Command format:"
            echo "  echo 'orglinter' | devbox shell    # org-linter plugin"
            echo "  echo 'dbseeder' | devbox shell     # db-seeder plugin"
            echo ""
            echo "‚ú® Enhanced modular architecture with improved caching and naming!"
          '';
        };
      }
    );
}
